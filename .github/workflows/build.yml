name: build

env:
  VMTOOLS_PREFIX: /opt/VirtualMetal/vmtools
  VMTOOLS_BINUTILS: binutils-2.39
  VMTOOLS_GCC: gcc-12.2.0
  VMTOOLS_GDB: gdb-12.1

on:
  push:
    branches:
      # build on all branches except master
      - '*'
      - '!master'
    tags:
      # build on release tags only
      - 'r[0-9]+*'
      - 'v[0-9]+*'
  workflow_dispatch:

jobs:

  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        target: [x86_64-elf, aarch64-elf]
        include:
          - os: windows-latest
            shell: msys2 {0}
          - os: ubuntu-latest
            shell: bash
    runs-on: ${{ matrix.os }}
    outputs:
      SOURCE_DATE_EPOCH: ${{ steps.environment.outputs.SOURCE_DATE_EPOCH }}
      VMTOOLS_RELEASE: ${{ steps.environment.outputs.VMTOOLS_RELEASE }}
    defaults:
      run:
        shell: ${{ matrix.shell }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install prerequisites (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          install: >-
            base-devel
            git
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-expat
      - name: Install prerequisites (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt install libgmp3-dev
          sudo apt install libmpc-dev
          sudo apt install libmpfr-dev
          sudo apt install libisl-dev
          sudo apt install libexpat-dev
      - name: Download binutils source
        run: |
          wget -q https://ftp.gnu.org/gnu/binutils/$VMTOOLS_BINUTILS.tar.xz
          tar xf $VMTOOLS_BINUTILS.tar.xz
      - name: Download gcc source
        run: |
          wget -q https://ftp.gnu.org/gnu/gcc/$VMTOOLS_GCC/$VMTOOLS_GCC.tar.xz
          tar xf $VMTOOLS_GCC.tar.xz
      - name: Download gdb source
        run: |
          wget -q https://ftp.gnu.org/gnu/gdb/$VMTOOLS_GDB.tar.xz
          tar xf $VMTOOLS_GDB.tar.xz
      - name: Prepare environment
        id: environment
        run: |
          # see https://reproducible-builds.org/specs/source-date-epoch/
          SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)
          echo SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH >>$GITHUB_ENV
          echo SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH >>$GITHUB_OUTPUT
          # VMTOOLS_RELEASE
          VMTOOLS_RELEASE="r$(date --date=@$SOURCE_DATE_EPOCH +%y%m%d)"
          echo VMTOOLS_RELEASE=$VMTOOLS_RELEASE
          echo VMTOOLS_RELEASE=$VMTOOLS_RELEASE >>$GITHUB_ENV
          echo VMTOOLS_RELEASE=$VMTOOLS_RELEASE >>$GITHUB_OUTPUT
          # additional VMTOOLS variables
          VMTOOLS_HOST=$($VMTOOLS_BINUTILS/config.guess | cut -d- -f1,3-)
          VMTOOLS_TARGET=${{ matrix.target }}
          echo VMTOOLS_HOST=$VMTOOLS_HOST
          echo VMTOOLS_TARGET=$VMTOOLS_TARGET
          echo VMTOOLS_HOST=$VMTOOLS_HOST >>$GITHUB_ENV
          echo VMTOOLS_TARGET=$VMTOOLS_TARGET >>$GITHUB_ENV
      - name: Build binutils
        run: |
          mkdir -p build/$VMTOOLS_BINUTILS && cd build/$VMTOOLS_BINUTILS
          CFLAGS="-ffile-prefix-map=${{ github.workspace }}=." \
          CXXFLAGS="-ffile-prefix-map=${{ github.workspace }}=." \
          LDFLAGS=--static \
          ../../$VMTOOLS_BINUTILS/configure \
              --prefix=$VMTOOLS_PREFIX/host.$VMTOOLS_HOST \
              --target=$VMTOOLS_TARGET \
              --enable-deterministic-archives \
              --disable-plugins \
              --disable-lto \
              --disable-nls
          make -j4
          make install-strip DESTDIR=$(pwd)/../dist/$VMTOOLS_GCC
          make install-strip
      - name: Build gcc
        run: |
          export PATH="$VMTOOLS_PREFIX/host.$VMTOOLS_HOST/bin:$PATH"
          mkdir -p build/$VMTOOLS_GCC && cd build/$VMTOOLS_GCC
          CFLAGS="-ffile-prefix-map=${{ github.workspace }}=." \
          CXXFLAGS="-ffile-prefix-map=${{ github.workspace }}=." \
          LDFLAGS=--static \
          ../../$VMTOOLS_GCC/configure \
              --prefix=$VMTOOLS_PREFIX/host.$VMTOOLS_HOST \
              --target=$VMTOOLS_TARGET \
              --without-headers \
              --enable-languages=c \
              --disable-plugins \
              --disable-lto \
              --disable-nls
          make -j4 all-gcc
          make -j4 all-target-libgcc
          make install-strip-gcc DESTDIR=$(pwd)/../dist/$VMTOOLS_GCC
          make install-strip-target-libgcc DESTDIR=$(pwd)/../dist/$VMTOOLS_GCC
      - name: Build gdb
        run: |
          mkdir -p build/$VMTOOLS_GDB && cd build/$VMTOOLS_GDB
          CFLAGS="-ffile-prefix-map=${{ github.workspace }}=." \
          CXXFLAGS="-ffile-prefix-map=${{ github.workspace }}=." \
          LDFLAGS=--static \
          ../../$VMTOOLS_GDB/configure \
              --prefix=$VMTOOLS_PREFIX/host.$VMTOOLS_HOST \
              --target=$VMTOOLS_TARGET \
              --with-expat \
              --without-python \
              --without-guile \
              --disable-sim \
              --disable-plugins \
              --disable-lto \
              --disable-nls
          make -j4 all-gdb
          make install-strip-gdb DESTDIR=$(pwd)/../dist/$VMTOOLS_GDB
      - name: Package vmtools
        run: |
          cd build/dist
          rm -rf $VMTOOLS_GCC/$VMTOOLS_PREFIX/host.$VMTOOLS_HOST/share/{info,man}
          tar --mtime=@$SOURCE_DATE_EPOCH --owner=0 --group=0 --numeric-owner --sort=name -cf - -C $VMTOOLS_GCC opt | \
              xz -9 >vmtools-$VMTOOLS_GCC-$VMTOOLS_RELEASE+$VMTOOLS_HOST+$VMTOOLS_TARGET.tar.xz
          rm -rf $VMTOOLS_GDB/$VMTOOLS_PREFIX/host.$VMTOOLS_HOST/share/{info,man}
          tar --mtime=@$SOURCE_DATE_EPOCH --owner=0 --group=0 --numeric-owner --sort=name -cf - -C $VMTOOLS_GDB opt | \
              xz -9 >vmtools-$VMTOOLS_GDB-$VMTOOLS_RELEASE+$VMTOOLS_HOST+$VMTOOLS_TARGET.tar.xz
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: vmtools
          path: |
            build/dist/vmtools*.tar.xz

  release:
    needs: build
    runs-on: ubuntu-latest
    env:
      SOURCE_DATE_EPOCH: ${{ needs.build.outputs.SOURCE_DATE_EPOCH }}
      VMTOOLS_RELEASE: ${{ needs.build.outputs.VMTOOLS_RELEASE }}
    steps:
      - name: Prepare environment
        id: environment
        run: |
          echo release_name=$(date --date=@$SOURCE_DATE_EPOCH +%Y-%m-%d) >>$GITHUB_OUTPUT
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: vmtools
      - name: Package vmtools
        run: |
          mkdir $VMTOOLS_GCC
          for f in vmtools-$VMTOOLS_GCC-*.tar.xz; do tar xf $f -C $VMTOOLS_GCC; done
          tar --mtime=@$SOURCE_DATE_EPOCH --owner=0 --group=0 --numeric-owner --sort=name -cf - -C $VMTOOLS_GCC opt | \
              xz -9 >vmtools-$VMTOOLS_GCC-$VMTOOLS_RELEASE.tar.xz
          mkdir $VMTOOLS_GDB
          for f in vmtools-$VMTOOLS_GDB-*.tar.xz; do tar xf $f -C $VMTOOLS_GDB; done
          tar --mtime=@$SOURCE_DATE_EPOCH --owner=0 --group=0 --numeric-owner --sort=name -cf - -C $VMTOOLS_GDB opt | \
              xz -9 >vmtools-$VMTOOLS_GDB-$VMTOOLS_RELEASE.tar.xz
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: vmtools
          path: |
            vmtools-${{ env.VMTOOLS_GCC }}-${{ env.VMTOOLS_RELEASE }}.tar.xz
            vmtools-${{ env.VMTOOLS_GDB }}-${{ env.VMTOOLS_RELEASE }}.tar.xz
      - name: Release ${{ github.ref_name }}
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.environment.outputs.release_name }}
          body: |
            Included tools:
            - ${{ env.VMTOOLS_GCC }} (with ${{ env.VMTOOLS_BINUTILS }})
            - ${{ env.VMTOOLS_GDB }}
          files: vmtools*.tar.xz
